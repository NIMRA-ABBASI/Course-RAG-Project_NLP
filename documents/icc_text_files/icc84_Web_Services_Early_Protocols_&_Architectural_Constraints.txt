 
 
A web service is a sophisticated software application designed to enable disparate systems to communicate and 
interact over the internet. Its fundamental purpose is to allow applications, regardless of the programming language 
they were written in or the platform they run on, to exchange data or invoke functionality programmatically. This 
capability is pivotal in building distributed systems, where different parts of an application or different applications 
altogether reside on various machines, collab orating to achieve a larger goal. Historically, before the ubiquitous 
adoption of HTTP-based web services, communication between remote systems was a complex and often proprietary 
endeavor. The early attempts to achieve this interoperability largely lacked  the standardization, flexibility, and 
widespread accessibility that later generations would bring. 
Before REST and SOAP became dominant for building web services, other approaches and 
technologies were used. These earlier methods lacked the standardization and flexibility. 
Early methods like Remote Procedure Call (RPC) allowed a program on one computer (client) to execute a 
function or subroutine on another computer (server) as if it were a local operation. While revolutionary for its time, 
RPC suffered from tight coupling, meaning changes to the server-side procedure often required client-side code 
modifications, leading to maintenance nightmares. Furthermore, its platform and language dependency in many 
implementations severely hampered true cross-platform interoperability. Similarly, CORBA (Common Object 
Request Broker Architecture), defined by the Object Management Group (OMG), aimed for language and 
platform independence using an Object Request Broker (ORB) as middleware and an Interface Definition 
Language (IDL) for contracts. However, its significant complexity in setup and configuration, coupled with 
performance overheads introduced by the ORB, made it cumbersome, particularly for scaling web-based 
systems. DCOM (Distributed Component Object Model), Microsoft's answer to distributed computing, extended 
its COM technology over networks. While effective within the Windows ecosystem, its inherent platform 
dependency (Windows-only) made it unsuitable for the diverse, cross-platform requirements of the emerging web. 
Prior to standardized API paradigms like REST and SOAP, developers also resorted to Early HTTP APIs. These 
were custom-built interfaces directly leveraging HTTP, but without adhering to any common architectural 
principles. This "wild west" approach meant that every service might have its own unique way of structuring 
requests, defining parameters, and handling responses. As depicted in the "Before REST" model, the server was 
typically responsible for processing logic and generating the complete HTML page, sending this fully rendered 
presentation layer back to the client (e.g., a web browser or simple mobile web view). This tightly coupled 
architecture meant the server dictated how data was displayed, leading to limited reusability. If another client (like 
a native mobile app) needed just the raw data without the HTML, it would inefficiently have to parse the HTML to 
extract information, a fragile and cumbersome process. While adequate for simple, browser-centric websites, this 
traditional approach quickly became inefficient and restrictive as applications evolved to require data-centric 
services and multi-platform support. 
 