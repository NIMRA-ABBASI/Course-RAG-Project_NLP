Key Features of Web Services (Continued): 
Building on standardized communication and platform independence, other important features of 
Web Services include: 
• Reusability: The same web service can be accessed and utilized by many different 
applications or consumers.  
• Interoperability: This is a crucial feature, enabling diverse systems to interact without 
compatibility issues.  
Example of Web Service Integration: 
Consider an online shopping application: 
• It integrates with a payment gateway service (which is implemented as a Web Service) to 
handle credit card transactions and other payment methods. 
• The Web Service (payment gateway) provides specific functionality (e.g., "process credit 
card transaction, " "authorize payment") without exposing its complex internal logic (like 
fraud detection algorithms or communication with banking networks) to the shopping 
application.  
Web Service Definition by W3C (Key Aspects): 
The World Wide Web Consortium (W3C) provides a formal definition that highlights key 
characteristics of a web service. According to the W3C, "A Web service is a software application 
that: 
1. Is Identified by a URI (Uniform Resource Identifier): 
o Each Web Service has a unique address (URI) that allows it to be uniquely 
identified and located on the web. This URI is the endpoint to which requests are 
sent. 
2. Has Interfaces and Binding Described by XML: 
o Its functionality (the interfaces it exposes) and the way it communicates 
(the binding information, including protocols and message formats) can 
be defined, described, and discovered using XML-based technologies. WSDL is 
a primary example of such a technology used for describing SOAP-based web 
services. 
3. Supports Direct Interactions with Other Software Applications: 

o Web services are designed for programmatic interaction. They interact directly with 
other software applications (service consumers) rather than directly with human 
users through a graphical interface. 
o Communication occurs using XML-based messages (like SOAP messages, or plain 
XML/JSON for RESTful services) exchanged over standard internet-based 
protocols like HTTP or HTTPS. 
Key Components in Practice (Illustrative Example: Google Maps API): 
To make this more concrete, consider the Google Maps API as an example of a widely used set of 
web services: 
• URI: The Google Maps API services each have specific URIs (endpoints) that developers 
use to request map data, geocoding services, directions, etc. 
(e.g., https://maps.googleapis.com/maps/api/geocode/json?address=...). 
• XML/JSON Artifacts (Descriptions & Messages): While WSDL is more for SOAP , RESTful 
APIs like many of Google's use documentation (often in formats like OpenAPI/Swagger 
which can be JSON/YAML) to describe their interfaces. Data is exchanged in a structured 
format, frequently JSON (though XML might also be supported for some services), ensuring 
compatibility.  
• Internet-Based Protocols: Interactions with the Google Maps API happen 
over HTTP/HTTPS. 
• Functionality as a Service: Google Maps API provides mapping data and related 
functionalities (like geocoding, directions) as a Web Service 