REST (REpresentational State Transfer) is not a protocol or a specific technology, but rather an architectural 
style for designing networked applications. Conceptualized by Roy Fielding, REST establishes a set of constraints 
and principles that guide the design of a highly scalable, flexible, and maintainable web service. At its core, a 
REST API acts as a software intermediary that allows two applications to communicate over the internet using 
standard HTTP methods. 
Key principles that define a RESTful API include: 
1. Client-Server Separation: The client and server are decoupled, allowing them to evolve independently. 
The client knows nothing about the server's internal logic, and the server knows nothing about the client's 
UI. 
2. Statelessness: Each request from the client to the server must contain all the information necessary to 
understand the request. The server should not store any client context between requests, which 
significantly enhances scalability as any server can handle any request. 
3. Cacheability: Responses should implicitly or explicitly define themselves as cacheable or non-cacheable. 
This allows clients, intermediaries, or servers to cache responses, reducing server load and improving 
performance. 
4. Uniform Interface: This is arguably the most crucial principle, simplifying the overall system architecture 
by providing a unified way to interact with all resources. It dictates that resources are identified by URIs, 
and operations on these resources are performed using standard HTTP methods. Messages exchanged 
should be self-descriptive, containing enough information for processing. 
5. Layered System: A RESTful system can be composed of multiple layers (e.g., proxies, load balancers, 
security components) without affecting the client-server interaction. 
When a client makes a request to a RESTful API, the server typically sends back a representation of the 
resource's current state. This "representation" is most commonly structured data in JSON (JavaScript Object 
Notation) or XML (eXtensible Markup Language) format. For instance, a request for a user might return a JSON 
object with fields like CITY, RESTAURANT NAME, and FOOD ITEM (as conceptual examples). 
The core components of a REST request that enable this interaction are: 
1. HTTP Verbs (Methods): These standardized verbs define the intended action on a resource. The primary 
verbs are: 
o GET: Retrieve data from the specified resource. 
o POST: Create a new resource or submit data to be processed. 
o PUT: Update/replace an entire resource or create it if it doesn't exist. 
o PATCH: Apply partial modifications to a resource. 
o DELETE: Remove the specified resource. 
2. Endpoint/Resource (URI - Uniform Resource Identifier): This identifies the specific resource the action 
will be performed upon. RESTful design dictates that URLs should represent nouns (resources), not verbs 
(actions). 
This principle is critically important for designing scalable and understandable APIs. Consider the stark contrast 
between incorrect and correct endpoint design: 

 Incorrect (Action-oriented URLs - Anti-pattern): URLs 
like /api/createUser, /api/readUsers, /api/updateUser, or /api/deleteUsers embed 
the action verb directly into the path. This leads to a proliferation of endpoints, makes the API less 
intuitive, and violates the uniform interface constraint. 
 Correct (Resource-oriented URLs - RESTful Approach): A RESTful API focuses on the resource. For 
example, to manage users, the base resource would be /api/users. Different HTTP verbs are then used 
to perform specific actions on this single resource: 
o POST /api/users: Creates a new user. 
o GET /api/users: Retrieves a list of all users. 
o PUT /api/users/{id}: Replaces the entire user resource with the given ID. 
o PATCH /api/users/{id}: Applies a partial update to the user resource with the given ID. 
o DELETE /api/users/{id}: Deletes the user resource with the given ID. 
This approach, where the URL points to the noun (resource) and the HTTP verb specifies the action, ensures 
clarity, consistency, and adherence to REST principles. The use of {id} (e.g., /api/users/123) in the URL 
path is a standard convention to specify individual instances of a resource, allowing for granular control over single 
items within a collection. This makes RESTful APIs highly discoverable, scalable, and manageable. 
 