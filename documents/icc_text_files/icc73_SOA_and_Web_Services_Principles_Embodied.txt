SOA and Web Services: A Symbiotic Relationship 
Web Services are an integral part and a common implementation mechanism for realizing a 
Service-Oriented Architecture (SOA). They inherently embody many of the core principles that 
define SOA, making them a natural fit for building modular, interoperable, and distributed 
systems. 
1. Web Services Have Service Contracts: 
• Definition of Contract: A service contract is a formal agreement or description that 
defines what a Web Service does, what operations it offers, and how other applications 
(consumers) can interact with it. It specifies the rules of engagement. 
• Role of WSDL: For SOAP-based Web Services, this contract is typically written using WSDL 
(Web Services Description Language). A WSDL document meticulously specifies details 
such as: 
1. Input/output messages: The structure and data types of the messages that the 
service expects as input for its operations and the messages it will return as output. 
2. Communication protocols: The network protocols that can be used to 
communicate with the service (e.g., SOAP over HTTP). 
3. Any preconditions or constraints: Specific requirements or conditions that must 
be met to use the service correctly. 
• Example of a Contract: A weather Web Service's contract (WSDL) would describe how a 
user (or an application acting on behalf of a user) can send a location (e.g., city name, zip 
code) as an input message and, in return, receive the current temperature and other 
weather conditions as an output message. It would also specify the data format for these 
messages. 
2. Web Services Are Loose-Coupled: 
• Minimal Dependencies: A fundamental characteristic of Web Services, aligning with SOA 
principles, is that they maintain minimal dependencies between the service provider 
(the entity hosting the Web Service) and the service consumer (the application using 
the Web Service). 
• Impact of Changes: This loose coupling means that changes within one system (e.g., the 
internal implementation of the Web Service by the provider) do not significantly or 
directly impact the other system (the consumer), as long as the agreed-upon service 
contract (the WSDL or API specification) remains unchanged. The consumer interacts with 
the service based on its published interface, not its internal workings. 

• Flexibility and Scalability: This independence ensures flexibility (providers can change 
their implementation without breaking consumers) and scalability (services can be scaled 
or updated independently). 
 